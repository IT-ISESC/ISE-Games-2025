---
export interface Score {
	team1: string
	team2: string
	score1: number
	score2: number
	round: string
}
export interface Props {
	scoreData: Score[]
}
const { scoreData } = Astro.props

// Function to sort by round order
const roundOrder = [
	'Round of 32',
	'Round of 16',
	'Quarter Finals',
	'Semi Finals',
	'Finals',
]

// Sort the matches by round order
const sortedMatches = scoreData.sort(
	(a, b) => roundOrder.indexOf(a.round) - roundOrder.indexOf(b.round)
)

// Group matches by round
const groupedMatches = sortedMatches.reduce((groups, match) => {
	if (!groups[match.round]) {
		groups[match.round] = []
	}
	groups[match.round].push(match)
	return groups
}, {})
---

<div class="matches-container">
	{
		roundOrder.map((round) => (
			<div key={round} class="mb-6">
				{/* Round Name */}
				<h2 class="m-6 mb-0 text-2xl font-bold text-[#012D48]">
					{round}
				</h2>
				<hr class="mx-6 my-1 border-1 border-[#012D48]" />

				<div class="matches">
					{groupedMatches[round]?.length > 0 ? (
						groupedMatches[round].map((match, matchIndex) => (
							<div
								key={matchIndex}
								class="m-6 rounded-xl bg-[#9C4035] p-3 text-[#F2E8CF]"
							>
								<div class="flex h-full items-center justify-between gap-10">
									{/* Match Info */}
									<div class="flex w-[60%] flex-col gap-2">
										{/* Team 1 */}
										<div class="flex justify-between gap-10">
											<span
												class={`w-40 truncate text-lg ${match.winner === match.team1 ? 'font-bold' : ''}`}
											>
												<span
													class={`${match.winner === match.team1 ? 'opacity-100' : 'opacity-0'}`}
												>
													•
												</span>
												{match.team1}
											</span>
											<span class="text-lg">
												{match.score1}
											</span>
										</div>

										{/* Team 2 */}
										<div class="flex justify-between gap-10">
											<span
												class={`w-40 truncate text-lg ${match.winner === match.team2 ? 'font-bold' : ''}`}
											>
												<span
													class={`${match.winner === match.team2 ? 'opacity-100' : 'opacity-0'}`}
												>
													•
												</span>
												{match.team2}
											</span>
											<span class="text-lg">
												{match.score2}
											</span>
										</div>
									</div>

									{/* Match Date and Time */}
									<div class="flex h-full flex-col items-center border-l pl-2.5">
										<span>{match.date}</span>
										<span>{match.time}</span>
									</div>
								</div>
							</div>
						))
					) : (
						<p class="text-center">
							No matches for this round yet.
						</p>
					)}
				</div>
			</div>
		))
	}
</div>
